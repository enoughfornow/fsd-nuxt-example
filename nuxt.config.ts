// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  compatibilityDate: '2024-11-01',
  devtools: { enabled: true },
  srcDir: 'src/',
  // errorPage: 'src/error.vue', вроде можно явно указать путь к этому компоненту
  alias: {
    '@': '~/shared',
    'app': '~/app',
    'entities': '~/entities',
    'widgets': '~/widgets',
    'features': '~/features',
  },
  dir: {
    layouts: './app/layouts',
  },
  modules: [
    '@nuxt/eslint',
    '@unocss/nuxt',
  ],
  eslint: {
    config: {
      standalone: false,
    },
  },
  // Это рекомендуемый способ добавления глобальных стилей в проектах Nuxt.
  // Использование nuxt.config.ts для импорта глобальных стилей имеет несколько преимуществ:
  // Централизованное управление: все глобальные стили определены в одном месте, что упрощает их поддержку и обновление.
  // Оптимизация производительности: Nuxt может лучше оптимизировать загрузку стилей, когда они определены в конфигурации.
  // Последовательность: стили применяются ко всему приложению единообразно.
  css: [
    '@unocss/reset/sanitize/sanitize.css',
    '@unocss/reset/sanitize/assets.css',
  ],
})
// Для использования компонента <NuxtPage/> без корневого файла app.vue в вашей кастомной структуре проекта,
//  вы можете следовать следующему подходу:
// Создайте компонент, который будет играть роль корневого компонента вашего приложения.
// Например, вы можете создать файл src/app/App.vue
//  (или любое другое название и расположение, которое соответствует вашей архитектуре).
// В этом компоненте используйте <NuxtPage/>:

// <template>
//   <div>
//     <!-- Здесь может быть ваш общий layout, например, header и footer -->
//     <NuxtPage />
//   </div>
// </template>

// <script setup>
// // Ваш setup код, если необходимо
// </script>
// Затем вам нужно указать Nuxt использовать этот компонент в качестве корневого.
// Для этого вы можете модифицировать ваш nuxt.config.ts:

// export default defineNuxtConfig({
//   // ... ваши текущие настройки ...
//   app: {
//     rootComponent: '~/app/App.vue'
//   }
// })
// Обратите внимание, что путь к вашему корневому компоненту должен быть указан относительно корня проекта,
//  а не относительно src директории.
// Если вы хотите использовать layouts, вы можете обернуть <NuxtPage/> в <NuxtLayout>:

// <template>
//   <div>
//     <NuxtLayout>
//       <NuxtPage />
//     </NuxtLayout>
//   </div>
// </template>
// Этот подход позволит вам использовать <NuxtPage/> и другие функции Nuxt без стандартного файла app.vue,
//  сохраняя при этом вашу кастомную структуру проекта.
// Важно отметить, что при таком подходе вам может потребоваться более тщательно настроить маршрутизацию
//  и другие аспекты вашего приложения, так как вы отходите от стандартной структуры Nuxt.
// Для более подробной информации о кастомизации корневого компонента в Nuxt 3,
// вы можете обратиться к официальной документации:
// Docs > Guide > Directory-structure > app
// Docs > Getting-started > Views
